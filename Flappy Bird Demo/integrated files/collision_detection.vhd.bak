library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.STD_LOGIC_ARITH.all;
use IEEE.STD_LOGIC_UNSIGNED.all;

ENTITY collision_detection IS
	PORT (
		ball_on, pipe_on, clk IN STD_LOGIC;
		game_mode IN INTEGER;
		life_point OUT INTEGER;
		dead OUT STD_LOGIC
		);
END collision_detection;

ARCHITECTURE behav OF collision_detection IS
SIGNAL t_life_point : INTEGER := 9;
SIGNAL init, t_dead : STD_LOGIC := '0';

life_point <= t_life_point;
dead <= t_dead;

BEGIN
	init_proc: PROCESS(clk, game_mode)
	BEGIN
		IF (init = '0') THEN
			CASE game_mode IS
				WHEN 0 => t_life_point <= 9;
				WHEN 1 => t_life_point <= 6;
				WHEN 2 => t_life_point <= 3;
				WHEN OTHERS => t_life_point <= 1;
			END CASE;
			init <= '1';
		END IF;
	END PROCESS;
	
	life_point_count_proc: PROCESS(clk, ball_on, pipe_on)
	BEGIN
		IF (rising_edge(clk)) THEN
			CASE t_life_point IS
				WHEN 0 => t_dead <= 1;
				WHEN OTHERS =>
					t_dead <= 0;
					IF ((ball_on ='0') AND (pipe_on = '1')) THEN
						life_point <= life_point - 1;
						